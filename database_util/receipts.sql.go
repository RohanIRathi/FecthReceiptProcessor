// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: receipts.sql

package database_util

import (
	"context"
	"time"
)

const createReceipt = `-- name: CreateReceipt :one
INSERT INTO
    receipts (id, retailer, purchase_datetime, total)
VALUES
    (?, ?, ?, ?) RETURNING id, retailer, purchase_datetime, total
`

type CreateReceiptParams struct {
	ID               string
	Retailer         string
	PurchaseDatetime time.Time
	Total            float64
}

func (q *Queries) CreateReceipt(ctx context.Context, arg CreateReceiptParams) (Receipt, error) {
	row := q.db.QueryRowContext(ctx, createReceipt,
		arg.ID,
		arg.Retailer,
		arg.PurchaseDatetime,
		arg.Total,
	)
	var i Receipt
	err := row.Scan(
		&i.ID,
		&i.Retailer,
		&i.PurchaseDatetime,
		&i.Total,
	)
	return i, err
}

const getReceipt = `-- name: GetReceipt :one
SELECT
    id, retailer, purchase_datetime, total
FROM
    receipts
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetReceipt(ctx context.Context, id string) (Receipt, error) {
	row := q.db.QueryRowContext(ctx, getReceipt, id)
	var i Receipt
	err := row.Scan(
		&i.ID,
		&i.Retailer,
		&i.PurchaseDatetime,
		&i.Total,
	)
	return i, err
}
